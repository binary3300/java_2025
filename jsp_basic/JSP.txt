■1. WEB
1. WEB
- TCP/IP 기반으로 연결되어 있는 컴퓨터네트워크 
- 클라이언트 ↔ 서버
- 1)  Web    프로그래밍 (Http 통신)   단방향통신 
     ( Client요청시 Server응답 후종료)
- 2)  Socket 프로그래밍 (채팅)           양방향통신 
     ( 특정port를 통해 실시간으로 정보를 주고 받음 - 계속연결되어 있음)

2. WS  VS  WAS
- WS (Web  Server)  : 정적콘텐츠 (html,css, js) 웹브라우저에제공
   예) Apache
- WAS (Web Application Server) : 동적콘텐츠 
   브라우저와 dbms사이에 동작하는 미들웨어 
   예)  Apache + tomcat

3. Tomcat
>> Http request( 요청) > Catalina(해결사) > Context > Servlet > response

3-1) http request(요청)
3-2) Coyte 가  해결사찾기: http요청을 처리할 웹어플리케이션(context) 
                                   web.xml 파일내용을 참고해서 요청전달.
3-3) Catalina (Servlet) : 해결사	
3-4) Jasper (Jsp Engine) :  java+html 페이지 요청처리 응답(response)


D:\java_2025\tomcat9.0\apache-tomcat-9.0.95\work\Catalina\localhost\jsp_basic\org\apache\jsp



■2. JSP
1.  JSP 기본요소
- HTML + JAVA

1) 스크립트립 : <%        %>   자바코드
2) 지시자       : <%@     %>   
3) 주석          : <%--   --%>
4) 표현          : <%=      %> 출력
5) 선언          : <%!       %> 선언

2. FORM
: 서버쪽으로 정보전달
  action="요청처리"          
  method="요청처리방식"  (get , post )
  name ="데이터보관이름"

3. 쿼리스트링
https://www.google.com/search?q=apple&name=sally

- url 뒤에 [입력데이터]를 함께 제공하는 데이터 전달방법
- get방식

- 클라이언트[#] ↔ 서버

4. request.getParameter("name값")
- 클라이언트 ↔ 서버[#]
- request.getParameter("q")





■3. 내장객체 

	1. request (요청)
		-request.getParameter("name"); 		값 한개
		-request.getParameterValues("name");		값 여러개 -checkbox
	2. response(응답)
		-response.sendRedirect("처리경로");
			*response/request가 유지안됨
			*location.href / meta http-equiv='refresh' content='초'; url='경로'
			
		-request.getRequestDispatcher("경로").forward(response, request);
			*요청과 응답 위임
			*response, request가 유지됨

	3. scop 범위
		[ application(애플리케이션) -> session(세션) -> request(요청) -> pageContext(페이지) ] 


	4. session
		-http 프로토콜(데이터 요청 - 응답을 받으면 바로 종료 )
		-서버측에 저장되는 정보 
		-보안
		
	5. cookie
		-클라이언트 측에 저장되는 정보
		-보안상에 취약


	6. error
		-4** (클라이언트측 오류), 5** (서버측에 오류)
		-404 페이지 찾을수없음, 500 자바코드상에 오류 
		-web.xml 에러설정

	7. out
		-출력


■4. mvc1 vs mvc2
	1. MVC
	-서로 영향없이 쉽게 고칠수 있는 애플리케이션

		- M: model 애플리케이션의 정보 (db정보, dto, dao, 비지닉스 login포함)
		- V:  view 	사용자가 사용하는 화면
		- C: controller model과 view사이의 상호작용 관리 

	2. mvc1 vs mvc2
	-mvc1 - controller 역할을 jsp가 담당
	-mvc2 - controller 역할을 servlet가 담당



■5. dbcp
	1. dbcp
	-분산운용프로그램 
		2. 실습
		 1) 다운로드
			https://commons.apache.org/downloads/	- dbcp, pool, collections
		 2) [WEB-INF] - JAR
		 3) DBCP - JAVA파일만들기 
			https://tomcat.apache.org/

■server.xml
<Context>
  <Resource name="jdbc/mbasic" auth="Container" 
	type="javax.sql.DataSource"
	maxTotal="100" maxIdle="30" maxWaitMillis="10000"
	username="root" password="1234" 
	driverClassName="com.mysql.cj.jdbc.Driver"
	url="jdbc:mysql://localhost:3306/mbasic"/>
</Context>

■web.xml
  <resource-ref>
      <description>DB Connection</description>
      <res-ref-name>jdbc/mbasic</res-ref-name>
      <res-type>javax.sql.DataSource</res-type>
      <res-auth>Container</res-auth>
  </resource-ref>

■DBCP연동
Context initContext = new InitialContext();
Context envContext  = (Context)initContext.lookup("java:/comp/env");
DataSource ds = (DataSource)envContext.lookup("jdbc/mbasic");
Connection conn = ds.getConnection();

1	first	11
2	second	22
3	third	33
4	fourth	44
6	zxc	11
7	lulu	1234
8	first	11
		




-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




■ PART 002
#1. frontcontroller board 게시판 완성
#2. 개발사이트 api + ajax
#3. [숙제] - api 2개이상 / upgrade 기능업그레이드


#2-1
>1) dynamic web project - JOAbooks
>2) inc - header/footer
>3) error page 설정 - 400/500
>4) dbcp 연동

DB: table명- board		todo 1
글번호	bno		int		not null auto_increment primary key	실무에서는long단위로 쓰지만 우리는 학생이니까 
글제목	btitle		varchar(100)	not null
글내용	bcontent		text		not null
글쓴이	bname		varchar(100)	not null
쓴날자	bdate		timestamp	not null	default current_timestamp 
조회수	bhit		int		default 0
아이피	bip		varchar(100)	not null



아이피 tmi 32bit에서 64bit로 늘었다


>글비번	bpass - 오늘은 안쓰지만 나중에 써도됨

Dto:	[com.company.domain] - BorderVo	private
DBManager: [com.company.dbmanager] - DBManager
Dao:	[com.company.dao] - BorderDao

=========================================================================

	글쓰기	insert into board ( btitle, bcontent, bname, bip ) values ( ?, ?, ?, ? );
	최신글 읽기	select * from board order by nbo desc;
	해당글 읽기	select * from board "where bno=?";
	조회수	update board set bhit=bhit+1 where bno=?;
	해당글 수정폼(유저가보는거)	select * from board "where bno=?";	#읽기랑 겹친당 
	해당 글 수정	update "board set btitlr=?, bcontrnt=? where bno=?";
	해당 글 삭제	delete from board where "bno=?";  zzzz>num=?;
	
Test

=========================================================================
	참고1)
	executeQuery 	- select (표)
	executeUpdate	-insert, update, delete (실행줄수)

	참고2)
	리턴값 메서드명(){}


	1. 글쓰기	insert into board ( btitle, bcontent, bname, bip ) values ( ?, ?, ?, ? );
	public int insert( BorderVo vo ){ return 0; }

	2. 최신글 읽기	select * from board order by nbo desc;
	public ArrayList<BorderVo> selectAll(){ return null; }

	3. 해당글 읽기	select * from board "where bno=?";
	    해당글 수정폼(유저가보는거)	select * from board "where bno=?";	#읽기랑 겹친당 
	public BorderVo select(int bno){ return null; }

	4. 조회수		update board set bhit=bhit+1 where bno=?;
	public int updateHit(int bno){ return 0; }

	5. 해당 글 수정	update "board set btitlr=?, bcontrnt=? where bno=?";
	public int update(BorderVo vo){ return 0; }

	6. 해당 글 삭제	delete from board where "bno=?";  zzzz>num=?;
	public int delete(int bno){ return 0; }

	private int bno;
	private String btitle;
	private String bcontent;
	private String bname;
	private int bhit;
	private String bdate;
	private String bip;

		<%
/* 		BoardDao dao = new BoardDao(); */
		//6 deletr
/* 		System.out.println( dao.delete(4) );
		System.out.println( dao.select(4) ); */
		// 5 update
/* 			BoardVo vo = new BoardVo();
			vo.setBtitle("새 제목");
			vo.setBcontent("새 내용");
			vo.setBno(4);
			System.out.println( dao.update(vo) );
			System.out.println( dao.select(4) ); */
		// 4.
		//System.out.println(dao.updateHit(1));
		// 3. select
		//System.out.println(dao.select(1));
		// 1. selectAll
		//System.out.println( dao.selectAll() );
		// 2. insert( BoardVo vo ) - btitle, bcontent, bname
		/*
		BoardVo vo = new BoardVo();
		vo.setBtitle("첫번째 문의드려요!");
		vo.setBcontent("내용");
		vo.setBname("first");
		System.out.println( dao.insert(vo) ); //1
		*/
		// 1. selectAll
		/* System.out.println(dao.selectAll()); */
		
		%>


[com.company.controller] - [FrontController]   *.do

[클라이언트 요청]   
↓
index.jsp  ->  *.do   [FrontController]
       ㄴ  /list.do           - C:전체리스트        BList        /      V:list.jsp 
       ㄴ  /write_view.do - C:X                                          V:write.jsp 
       ㄴ  /write.do        - C:글삽입             BWrite(알림창- 성공/실패) /   V: /list.do
       ㄴ  /detail.do      - C:해당번호 상세보기  BDetail(조회수올리기/해당글상세)
                                      V:detail.jsp
       ㄴ  /edit_view.do  - C:해당번호 글수정폼  BEditView(해당글상세)
                                      V:edit.jsp
       ㄴ  /edit.do       - C:해당번호 글수정기능 BEdit(해당글수정)
                                      V: /detail.do 
       ㄴ  /delete.do     - C:해당번호 글삭제기능 BDelete(해당글삭제)      V: /list.do













